/**
 * Convert a Uint8Array of bytes into a byte-like string.
 * @example
 * hexToString(Uint8Array.from([ 11, 81, 203 ]));
 * > "0b51cb"
 * @param hex The array to convert.
 * @returns The resulting byte-like string.
 */
export declare function hexToString(hex: Uint8Array): string;
/**
 * Convert a byte-like string into an array of bytes.
 * @example
 * stringToHex("0b51cb");
 * > [ 11, 81, 203 ]
 * @param string The byte-like string to convert.
 * @returns The resulting byte array.
 */
export declare function stringToHex(string: string): Uint8Array;
/**
 * Convert UTF-8 text into an array of bytes.
 * @example
 * textToHex("Tribes");
 * > [ 84, 114, 105, 98, 101, 115 ]
 * @param text The text to convert.
 * @returns The resulting byte array.
 */
export declare function textToHex(text: string): Uint8Array;
/**
 * Inverts the endianness of a Uint8Array.
 * @param array The array to invert.
 * @returns The now inverted array.
 */
export declare function invertEndianness(array: Uint8Array): Uint8Array;
/**
 * Verify that the length of a given network packet is correct (as per the packet's `length` byte).
 * @param packet A network packet, as received.
 * @returns `true` if the length of the packet is correct, `false` if not.
 */
export declare function verifyPacketLength(packet: Uint8Array): boolean;
//# sourceMappingURL=Utils.d.ts.map