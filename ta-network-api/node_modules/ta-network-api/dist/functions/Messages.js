import { stringToHex, textToHex, invertEndianness } from './Utils.js';
import { xorPasswordHash } from './Password.js';
function compileMessage(chunks) {
    let result = [];
    chunks.forEach((chunk) => {
        if (typeof chunk === 'string') {
            const processedChunk = stringToHex(chunk);
            if (processedChunk) {
                result.push(...processedChunk);
            }
            else {
                console.warn('Message chunk processed incorrectly. Message may be malformed.');
            }
        }
        else if (typeof chunk === 'object' && chunk.length > 0) {
            result.push(...Array.from(chunk));
        }
        else {
            console.warn('Message chunk not processed. Message may be malformed.');
        }
    });
    return new Uint8Array(result);
}
export class GenericMessage {
    buffer = {};
    constructor(content) {
        this.buffer = compileMessage(content);
    }
}
export class AuthenticationMessage {
    buffer = {};
    constructor(credentials) {
        const passwordHash = xorPasswordHash(credentials.passwordHash, credentials.salt);
        const message = compileMessage([
            '3a000b005600',
            invertEndianness(stringToHex(passwordHash.length.toString(16).padStart(4, '0'))),
            '0000',
            passwordHash,
            '9404',
            invertEndianness(stringToHex(credentials.username.length.toString(16).padStart(4, '0'))),
            textToHex(credentials.username),
            '7106432800007206000000007306017706c3ee58437606d13f00007406de1000007506811b0000340400000000000000009e04610b04010000000000000000'
        ]);
        this.buffer = compileMessage([
            invertEndianness(stringToHex(message.length.toString(16).padStart(4, '0'))),
            message
        ]);
    }
}
export class ServerListMessage {
    buffer = {};
    constructor() {
        this.buffer = compileMessage(['1600d5000200280202000000e90000002b0000002d000000']);
    }
}
export class ServerInfoMessage {
    buffer = {};
    constructor(serverId) {
        const idBytes = serverId.toString(16).padStart(8, '0');
        this.buffer = compileMessage([
            '1800',
            'c6010200c702',
            idBytes.substring(6, 8),
            idBytes.substring(4, 6),
            idBytes.substring(2, 4),
            idBytes.substring(0, 2),
            '2802020000003d00000029000000'
        ]);
    }
}
export class WatchNowMessage {
    buffer = {};
    constructor() {
        this.buffer = compileMessage(['0c00b50100002d00000027000000']);
    }
}
export class DirectMessageMessage {
    buffer;
    constructor(recipient, content) {
        const message = compileMessage([
            '700004009e00',
            '06000000',
            'e602',
            invertEndianness(stringToHex(content.length.toString(16).padStart(4, '0'))),
            textToHex(content),
            '4a03',
            invertEndianness(stringToHex(recipient.length.toString(16).padStart(4, '0'))),
            textToHex(recipient),
            '740500',
            '2400000088010000'
        ]);
        this.buffer = compileMessage([
            invertEndianness(stringToHex(message.length.toString(16).padStart(4, '0'))),
            message
        ]);
    }
}
//# sourceMappingURL=Messages.js.map