import { loginServers } from '../data/index.js';
import type { LoginServer, HashedCredentials } from '../interfaces/index.js';
import type { FetchableDataset, FetchType } from '../datasets/index.js';
import { AccountData } from '../datasets/index.js';
import { BufferOptions } from './Buffer.js';
import { DecoderOptions } from './Decoder.js';
import * as Messages from './Messages.js';
interface LoginServerConnectionOptions {
    authenticate?: boolean;
    debug?: boolean;
    processMalformedPackets?: boolean;
    timeout?: number;
    buffer?: BufferOptions;
    decoder?: DecoderOptions;
}
export declare class LoginServerConnection {
    #private;
    constructor(server: keyof typeof loginServers | LoginServer, credentials: HashedCredentials, options?: LoginServerConnectionOptions);
    get accountData(): AccountData | undefined;
    /**
     * Connect to the login server.
     */
    connect(): Promise<void>;
    /**
     * Disconnect from the login server.
     */
    disconnect(): Promise<void>;
    send(message: Messages.GenericMessage, callback: Function): Promise<void>;
    fetch<T extends FetchableDataset>(dataset: T, ...data: (T extends 'GameServerInfo' ? [number] : [])): Promise<FetchType<T>>;
}
export {};
//# sourceMappingURL=Connections.d.ts.map